# Generated by Django 4.0.2 on 2022-03-02 10:17

import uuid

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.db.models.expressions
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models

import femlliga.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="CustomUser",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True, max_length=254, verbose_name="email address"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Contact",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("date", models.DateTimeField(auto_now_add=True)),
                ("email", models.EmailField(max_length=254)),
                ("content", models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name="Need",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource",
                    models.CharField(
                        choices=[
                            ("PLACE", "Local"),
                            ("SERVICE", "Servei"),
                            ("TRAINING", "Formació"),
                            ("EQUIPMENT", "Equipaments"),
                            ("OTHER", "Altres"),
                        ],
                        max_length=100,
                    ),
                ),
                ("comments", models.TextField(blank=True, null=True)),
                ("has_resource", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="Offer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "resource",
                    models.CharField(
                        choices=[
                            ("PLACE", "Local"),
                            ("SERVICE", "Servei"),
                            ("TRAINING", "Formació"),
                            ("EQUIPMENT", "Equipaments"),
                            ("OTHER", "Altres"),
                        ],
                        max_length=100,
                    ),
                ),
                ("comments", models.TextField(blank=True, null=True)),
                ("has_resource", models.BooleanField(default=False)),
                ("charge", models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name="OrganizationScope",
            fields=[
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("EQUALITY", "Dona/Igualtat/Feminismes"),
                            ("EDUCATION", "Educació"),
                            ("OLDER_PEOPLE", "Persones majors"),
                            ("NEIGHBORHOOD", "Veïnal"),
                            ("SPORTS", "Activitat física i esportiva"),
                            ("CULTURE", "Cultura, patrimoni, territori, llengua..."),
                            ("YOUTH", "Infància, adolescència i joventut"),
                            ("SOCIAL_ASSISTANCE", "Benestar social"),
                            ("COOPERATION", "Cooperació i sensibilització"),
                            ("ENVIRONMENT", "Medi ambient i mobilitat sostenible"),
                            ("TRADITIONS", "Festa i tradicions"),
                            ("RELIGIOUS", "Religiosa"),
                            (
                                "PARTICIPATION",
                                "Participació ciutadana i dinamització comunitària",
                            ),
                            ("DESIGN", "Disseny i comunicació"),
                            ("TRAINING", "Formació i recerca"),
                            ("HOUSING", "Habitatge i gestió de l’entorn"),
                            ("FOOD", "Alimentació, restauració i hosteleria"),
                            ("LOGISTICS", "Logística i subministraments"),
                            ("FINANCE", "Finançament i Moneda Social"),
                            ("PRODUCTION", "Producció"),
                            ("TRADE", "Comerç"),
                            ("HEALTH", "Salut i Cures"),
                            ("TECHNOLOGY", "Tecnologia i electrònica"),
                            ("TEXTILE", "Textil"),
                            ("ACCESSIBILITY", "Accessibilitat"),
                            ("OTHER", "Altres"),
                        ],
                        max_length=100,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Page",
            fields=[
                ("name", models.SlugField(primary_key=True, serialize=False)),
                ("heading", models.TextField()),
                ("subheading", models.TextField(blank=True)),
                ("content", models.TextField()),
                ("image", models.CharField(blank=True, max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name="ResourceOption",
            fields=[
                (
                    "name",
                    models.CharField(
                        choices=[
                            ("DAILY_USAGE", "Ús diari"),
                            ("PUNCTUAL_USAGE", "Ús puntual"),
                            (
                                "COMMUNITY_MANAGER",
                                "Gestió de la comunicació (web, xarxes socials, etc.)",
                            ),
                            ("INSURANCE", "Assegurança"),
                            ("AGENCY", "Gestoria"),
                            ("PROJECT_WRITING", "Redacció de projectes"),
                            (
                                "DIGITAL_BUREAUCRACY",
                                "Relacions digitals amb l'administració",
                            ),
                            ("TRAINING_DIGITAL", "Digitalització"),
                            ("TRAINING_BUREAUCRACY", "Relacions amb l'administració"),
                            ("TRAINING_EQUALITY", "Igualtat"),
                            ("TRAINING_ENERGY_SAVING", "Estalvi energètic"),
                            ("SOUND_SYSTEM_ACOUSTIC", "Equip de so per a xerrades"),
                            ("SOUND_SYSTEM_CONCERT", "Equip de so per a concerts"),
                            ("PROJECTOR", "Projector"),
                            ("VEHICLE", "Vehicle"),
                            ("STAGE", "Escenari"),
                            ("CHAIRS_TABLES", "Cadires i taules"),
                            ("DISHES", "Plats, gots i coberts"),
                            ("KITCHEN_EQUIPMENT", "Material de cuina"),
                            ("CAMPING_EQUIPMENT", "Material d'acampada"),
                        ],
                        max_length=100,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=200)),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "org_type",
                    models.CharField(
                        choices=[
                            ("ASSOCIATION", "Associació"),
                            ("COOPERATIVE", "Cooperativa"),
                            (
                                "NONPROFIT_COOPERATIVE",
                                "Cooperativa sense ànim de lucre",
                            ),
                            ("FOUNDATION", "Fundació"),
                            ("LABOR_SOCIETY", "Societat laboral"),
                            ("MUTUALITY", "Mutualitat"),
                            ("INSERTION_COMPANY", "Empresa d’inserció"),
                            ("SPECIAL_WORK_CENTER", "Centre especial de treball"),
                        ],
                        max_length=100,
                    ),
                ),
                ("resources_set", models.BooleanField(default=False)),
                ("lat", models.DecimalField(decimal_places=9, max_digits=12)),
                ("lng", models.DecimalField(decimal_places=9, max_digits=12)),
                ("city", models.CharField(max_length=100)),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="organizations",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ("scopes", models.ManyToManyField(to="femlliga.OrganizationScope")),
            ],
        ),
        migrations.CreateModel(
            name="OfferImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to=femlliga.models.offer_images_directory_path
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="femlliga.offer",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="offer",
            name="options",
            field=models.ManyToManyField(to="femlliga.ResourceOption"),
        ),
        migrations.AddField(
            model_name="offer",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="offers",
                to="femlliga.organization",
            ),
        ),
        migrations.CreateModel(
            name="NeedImage",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "image",
                    models.ImageField(
                        upload_to=femlliga.models.need_images_directory_path
                    ),
                ),
                (
                    "resource",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="images",
                        to="femlliga.need",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="need",
            name="options",
            field=models.ManyToManyField(to="femlliga.ResourceOption"),
        ),
        migrations.AddField(
            model_name="need",
            name="organization",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="needs",
                to="femlliga.organization",
            ),
        ),
        migrations.CreateModel(
            name="Agreement",
            fields=[
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("message", models.TextField()),
                ("date", models.DateTimeField(auto_now_add=True)),
                (
                    "resource",
                    models.CharField(
                        choices=[
                            ("PLACE", "Local"),
                            ("SERVICE", "Servei"),
                            ("TRAINING", "Formació"),
                            ("EQUIPMENT", "Equipaments"),
                            ("OTHER", "Altres"),
                        ],
                        max_length=100,
                    ),
                ),
                (
                    "resource_type",
                    models.CharField(
                        choices=[("need", "need"), ("offer", "offer")], max_length=10
                    ),
                ),
                ("communication_accepted", models.BooleanField(null=True)),
                ("communication_date", models.DateTimeField(blank=True, null=True)),
                ("agreement_successful", models.BooleanField(null=True)),
                ("successful_date", models.DateTimeField(blank=True, null=True)),
                ("options", models.ManyToManyField(to="femlliga.ResourceOption")),
                (
                    "solicitee",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="received_agreements",
                        to="femlliga.organization",
                    ),
                ),
                (
                    "solicitor",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="sent_agreements",
                        to="femlliga.organization",
                    ),
                ),
            ],
        ),
        migrations.AddConstraint(
            model_name="offer",
            constraint=models.UniqueConstraint(
                django.db.models.expressions.F("organization"),
                django.db.models.expressions.F("resource"),
                name="unique_organization_offer",
            ),
        ),
        migrations.AddConstraint(
            model_name="need",
            constraint=models.UniqueConstraint(
                django.db.models.expressions.F("organization"),
                django.db.models.expressions.F("resource"),
                name="unique_organization_need",
            ),
        ),
    ]
